name: Pre‑warm pip cache

on:
  workflow_dispatch:
  # schedule:
  #   - cron: "0 3 * * 1"   # every Monday 03:00 UTC

env:
  PYTHON_VERSION: "3.9"

# ------------------------------------------------------------
# Job 1 – Windows CPU
# ------------------------------------------------------------
jobs:
  warm-win-cpu:
    runs-on: windows-latest
    env:
      TRANSCRIBRR_FLAVOUR: cpu

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Restore wheel cache
        id: restore-win-cpu
        uses: actions/cache/restore@v3
        with:
          path: ~\AppData\Local\pip\Cache
          key:  Windows-pip-${{ env.PYTHON_VERSION }}-cpu-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            Windows-pip-${{ env.PYTHON_VERSION }}-cpu-

      - name: Install requirements
        shell: bash
        run: |
          python -m pip install --upgrade pip wheel
          python -m pip install -r requirements.txt

      - name: Save wheel cache
        if: always()
        uses: actions/cache/save@v3
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ steps.restore-win-cpu.outputs.cache-primary-key }}

# ------------------------------------------------------------
# Job 2 – Windows CUDA
# ------------------------------------------------------------
  warm-win-cuda:
    runs-on: windows-latest
    env:
      TRANSCRIBRR_FLAVOUR: cuda

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Restore wheel cache
        id: restore-win-cuda
        uses: actions/cache/restore@v3
        with:
          path: ~\AppData\Local\pip\Cache
          key:  Windows-pip-${{ env.PYTHON_VERSION }}-cuda-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            Windows-pip-${{ env.PYTHON_VERSION }}-cuda-

      - name: Install requirements + CUDA wheels
        shell: bash
        run: |
          python -m pip install --upgrade pip wheel
          python -m pip install -r requirements.txt
          python -m pip install torch torchvision torchaudio \
            --index-url https://download.pytorch.org/whl/cu118

      - name: Save wheel cache
        if: always()
        uses: actions/cache/save@v3
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ steps.restore-win-cuda.outputs.cache-primary-key }}

# ------------------------------------------------------------
# Job 3 – macOS CPU
# ------------------------------------------------------------
  warm-macos:
    runs-on: macos-14
    env:
      TRANSCRIBRR_FLAVOUR: cpu

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Locate pip cache dir
        id: pip-dir
        run: echo "dir=$(python -m pip cache dir)" >> "$GITHUB_OUTPUT"

      - name: Restore wheel cache
        id: restore-macos
        uses: actions/cache/restore@v3
        with:
          path: ${{ steps.pip-dir.outputs.dir }}
          key:  Macos-pip-${{ env.PYTHON_VERSION }}-cpu-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            Macos-pip-${{ env.PYTHON_VERSION }}-cpu-

      - name: Install requirements
        run: |
          python -m pip install --upgrade pip wheel
          python -m pip install -r requirements.txt

      - name: Save wheel cache
        if: always()
        uses: actions/cache/save@v3
        with:
          path: ${{ steps.pip-dir.outputs.dir }}
          key: ${{ steps.restore-macos.outputs.cache-primary-key }}
