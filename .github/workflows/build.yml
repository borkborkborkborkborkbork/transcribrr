name: Build & Package Transcribrr

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

env:
  PYTHON_VERSION: '3.9'

jobs:
  win:
    runs-on: windows-latest
    strategy:
      matrix:
        flavour: [cpu, cuda]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-${{ matrix.flavour }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-${{ matrix.flavour }}
            ${{ runner.os }}-pip-

      - name: Install build deps
        shell: bash
        run: |
          python -m pip install --upgrade pip wheel
          if [[ "${{ matrix.flavour }}" == "cuda" ]]; then
            python -m pip install torch torchvision torchaudio \
              --index-url https://download.pytorch.org/whl/cu118
          else
            python -m pip install torch torchvision torchaudio
          fi
          # Pin PyInstaller to an explicit patch series to avoid CI breakage when
          # new minor versions introduce regressions.  6.13 is the latest patch
          # line that we have verified to work with this project.
          python -m pip install "pyinstaller==6.13.*" pyqt6 pyqt6-qt6 -r requirements.txt
          choco install ffmpeg -y

      - name: Derive version
        id: ver
        run: echo "VER=${GITHUB_REF##*/v}" >> "$GITHUB_OUTPUT"

      - name: Prepare FFmpeg binaries
        shell: pwsh
        run: |
          # Create bin directory in project root for the spec file to find
          New-Item -ItemType Directory -Force "bin"
          # Find FFmpeg executables installed by Chocolatey
          $ffmpegPath = (Get-Command ffmpeg.exe).Source
          $ffprobePath = (Get-Command ffprobe.exe).Source
          # Copy to the bin directory
          Copy-Item $ffmpegPath "bin/ffmpeg.exe"
          Copy-Item $ffprobePath "bin/ffprobe.exe"

      - name: Debug FFmpeg presence
        shell: bash
        run: |
          echo "Working dir: $(pwd)"
          ls -R bin || true

      - name: Freeze with PyInstaller
        shell: bash
        env:
          TRANSCRIBRR_FLAVOUR: ${{ matrix.flavour }}
        run: |
          set -o pipefail            # fail the step if PyInstaller exits non‑zero
          mkdir -p build
          pyinstaller transcribrr.spec --noconfirm --clean --log-level=DEBUG \
            2>&1 | tee build/pyinstaller-${{ matrix.flavour }}.log
          
          mv dist/Transcribrr "dist/Transcribrr_${{ matrix.flavour }}"

      - name: Upload PyInstaller log
        if: always()                 # run even when earlier steps failed
        uses: actions/upload-artifact@v4
        with:
          name: pyinstaller_log_${{ matrix.flavour }}
          path: build/pyinstaller-${{ matrix.flavour }}.log

      - name: Verify Qt plugins
        shell: pwsh
        run: |
          $qtPluginsDir = "dist/Transcribrr_${{ matrix.flavour }}/qt6_plugins"
          $qwindowsDll = "$qtPluginsDir/platforms/qwindows.dll"
          
          if (Test-Path $qwindowsDll) {
            echo "✓ Qt plugins successfully included: $qwindowsDll exists"
          } else {
            echo "❌ MISSING REQUIRED QT PLUGINS"
            echo "The Qt6 plugins directory structure is:"
            Get-ChildItem -Recurse $qtPluginsDir -ErrorAction SilentlyContinue | Select-Object FullName
            exit 1
          }

      - name: Build installer with Inno Setup
        shell: pwsh
        run: |
          $inno = "C:\Program Files (x86)\Inno Setup 6\ISCC.exe"
          if (-not (Test-Path $inno)) { choco install innosetup -y }
          & $inno /DFlavour=${{ matrix.flavour }} `
                 /DMyAppVersionValue=${{ steps.ver.outputs.VER }} `
                 installer\transcribrr_setup.iss

      - name: Upload artefacts
        uses: actions/upload-artifact@v4
        with:
          name: Transcribrr_windows_${{ matrix.flavour }}
          path: |
            dist/Transcribrr-windows-${{ matrix.flavour }}-setup.exe
            dist/Transcribrr_${{ matrix.flavour }}
            build/pyinstaller-${{ matrix.flavour }}.log

      - name: Save wheel cache
        if: always()
        uses: actions/cache/save@v3
        with:
          path: ${{ steps.pip-dir.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-${{ matrix.flavour }}-${{ hashFiles('**/requirements.txt') }}

