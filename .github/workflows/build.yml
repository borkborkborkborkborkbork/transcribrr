# .github/workflows/build.yml

name: Build & Package Transcribrr

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The application version (e.g., 1.0.0). Required for manual builds.'
        required: true
        type: string
  push:
    tags:
      - 'v*.*.*' # Trigger only on tags like v1.0.0, v1.2.3, etc.

env:
  PYTHON_VERSION: '3.9'

jobs:
  win:
    runs-on: windows-latest
    strategy:
      matrix:
        flavour: [cpu, cuda]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-${{ matrix.flavour }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-${{ matrix.flavour }}
            ${{ runner.os }}-pip-

      - name: Install build deps
        shell: bash
        run: |
          python -m pip install --upgrade pip wheel
          if [[ "${{ matrix.flavour }}" == "cuda" ]]; then
            python -m pip install torch torchvision torchaudio \
              --index-url https://download.pytorch.org/whl/cu118
          else
            python -m pip install torch torchvision torchaudio
          fi
          # Pin PyInstaller to an explicit patch series to avoid CI breakage when
          # new minor versions introduce regressions.  6.13 is the latest patch
          # line that we have verified to work with this project.
          python -m pip install "pyinstaller==6.13.*" pyqt6 pyqt6-qt6 -r requirements.txt
          choco install ffmpeg -y

      - name: Derive version
        id: ver
        shell: bash # Use bash for the if statement
        run: |
          echo "Workflow triggered by: ${{ github.event_name }}"
          echo "Git Ref: ${{ github.ref }}"

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Use manual input version
            MANUAL_VERSION="${{ github.event.inputs.version }}"
            echo "Using manual input version: $MANUAL_VERSION"
            if [[ -z "$MANUAL_VERSION" ]]; then
              echo "::error::Manual version input ('version') cannot be empty for workflow_dispatch trigger."
              exit 1
            fi
            echo "VER=$MANUAL_VERSION" >> "$GITHUB_OUTPUT"

          elif [[ "${{ github.event_name }}" == "push" && "${{ startsWith(github.ref, 'refs/tags/v') }}" == "true" ]]; then
            # Extract version from tag
            VERSION_FROM_TAG="${GITHUB_REF##*/v}"
            echo "Using tag version: $VERSION_FROM_TAG"
            if [[ -z "$VERSION_FROM_TAG" ]]; then
               echo "::error::Could not extract version from tag '${{ github.ref }}'!"
               exit 1
            fi
            echo "VER=$VERSION_FROM_TAG" >> "$GITHUB_OUTPUT"

          else
            # Error if trigger is not recognized or tag format is wrong
            echo "::error::Could not determine version. Trigger must be a tag push like 'vX.Y.Z' or a manual dispatch providing the 'version' input."
            exit 1
          fi

      - name: Debug FFmpeg presence
        shell: bash
        run: |
          echo "Working dir: $(pwd)"
          ls -R bin || true

      - name: Provide OpenSSL runtime for Qt
        shell: pwsh
        run: |
          $openssl = "${env:ChocolateyInstall}\bin\openssl.exe"
          if (-not (Test-Path $openssl)) { choco install openssl -y }
          # Qt6 expects libssl-3.dll and libcrypto-3.dll next to the exe
          Copy-Item "$env:ChocolateyInstall\lib\openssl*3*\bin\libcrypto-3-x64.dll" bin\libcrypto-3.dll
          Copy-Item "$env:ChocolateyInstall\lib\openssl*3*\bin\libssl-3-x64.dll"    bin\libssl-3.dll

      - name: Save wheel cache
        if: always()
        uses: actions/cache/save@v3
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-${{ matrix.flavour }}-${{ hashFiles('**/requirements.txt') }}
        
      - name: Freeze with PyInstaller
        shell: bash
        env:
          TRANSCRIBRR_FLAVOUR: ${{ matrix.flavour }}
        run: |
          set -o pipefail            # fail the step if PyInstaller exits nonâ€‘zero
          mkdir -p build
          pyinstaller transcribrr.spec --noconfirm --clean --log-level=DEBUG \
            2>&1 | tee build/pyinstaller-${{ matrix.flavour }}.log
          
          mv dist/Transcribrr "dist/Transcribrr_${{ matrix.flavour }}"

      - name: Upload PyInstaller log
        if: always()                 # run even when earlier steps failed
        uses: actions/upload-artifact@v4
        with:
          name: pyinstaller_log_${{ matrix.flavour }}
          path: build/pyinstaller-${{ matrix.flavour }}.log


      - name: Build installer with Inno Setup
        shell: pwsh
        run: |
          $inno = "C:\Program Files (x86)\Inno Setup 6\ISCC.exe"
          if (-not (Test-Path $inno)) { choco install innosetup -y }
          & $inno /DFlavour=${{ matrix.flavour }} `
                 /DMyAppVersionValue=${{ steps.ver.outputs.VER }} `  
                 installer\transcribrr_setup.iss

      - name: Upload artefacts
        uses: actions/upload-artifact@v4
        with:
          name: Transcribrr_windows_${{ matrix.flavour }}
          path: |
            dist/Transcribrr-windows-${{ matrix.flavour }}-setup.exe
            dist/Transcribrr_${{ matrix.flavour }}
            build/pyinstaller-${{ matrix.flavour }}.log



