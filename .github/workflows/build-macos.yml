name: Build macOS App

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Skip PyAudio in requirements and install it separately after portaudio is installed
          grep -v "PyAudio" requirements.txt > requirements_without_pyaudio.txt
          pip install -r requirements_without_pyaudio.txt
      
      - name: Install homebrew dependencies
        run: |
          brew install ffmpeg portaudio
      
      - name: Install PyAudio
        run: |
          # Install PyAudio after portaudio is installed
          pip install PyAudio

      - name: Create app bundle manually
        run: |
          # App information
          APP_NAME="Transcribrr"
          VERSION="1.0.0"
          BUNDLE_ID="com.transcribrr.app"
          APP_DIR="dist/${APP_NAME}.app"
          
          # Create directories
          echo "Creating app bundle structure..."
          mkdir -p "${APP_DIR}/Contents/MacOS"
          mkdir -p "${APP_DIR}/Contents/Resources"
          mkdir -p "${APP_DIR}/Contents/Frameworks"
          mkdir -p "${APP_DIR}/Contents/MacOS/bin"
          mkdir -p "${APP_DIR}/Contents/Resources/icons"
          mkdir -p "${APP_DIR}/Contents/Resources/icons/status"
          mkdir -p "${APP_DIR}/Contents/Resources/app"
          mkdir -p "${APP_DIR}/Contents/Resources/Recordings"
          mkdir -p "${APP_DIR}/Contents/Resources/database"
          mkdir -p "${APP_DIR}/Contents/Resources/logs"
          
          # Copy icon
          cp icons/app/app_icon.icns "${APP_DIR}/Contents/Resources/"
          
          # Create Info.plist
          cat > "${APP_DIR}/Contents/Info.plist" << EOL
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>CFBundleDevelopmentRegion</key>
    <string>English</string>
    <key>CFBundleDisplayName</key>
    <string>${APP_NAME}</string>
    <key>CFBundleExecutable</key>
    <string>${APP_NAME}</string>
    <key>CFBundleIconFile</key>
    <string>app_icon.icns</string>
    <key>CFBundleIdentifier</key>
    <string>${BUNDLE_ID}</string>
    <key>CFBundleInfoDictionaryVersion</key>
    <string>6.0</string>
    <key>CFBundleName</key>
    <string>${APP_NAME}</string>
    <key>CFBundlePackageType</key>
    <string>APPL</string>
    <key>CFBundleShortVersionString</key>
    <string>${VERSION}</string>
    <key>CFBundleVersion</key>
    <string>${VERSION}</string>
    <key>NSHighResolutionCapable</key>
    <true/>
    <key>NSRequiresAquaSystemAppearance</key>
    <false/>
    <key>NSMicrophoneUsageDescription</key>
    <string>${APP_NAME} needs access to the microphone for voice recording.</string>
</dict>
</plist>
EOL
          
          # Create launcher script with FFMPEG path included directly
          cat > "${APP_DIR}/Contents/MacOS/${APP_NAME}" << 'EOL'
#!/bin/bash

# Get the directory where this script is located
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
RESOURCES_DIR="$DIR/../Resources"

# Set Python environment variables
export PYTHONPATH="$RESOURCES_DIR:$PYTHONPATH"
# Add ffmpeg to PATH
export PATH="$DIR/bin:$PATH"
export SSL_CERT_FILE="$RESOURCES_DIR/cacert.pem"

# Activate the virtual environment using source
source "$RESOURCES_DIR/python/bin/activate"

# Echo diagnostic information to a log file
echo "Starting application at $(date)" > "$RESOURCES_DIR/launch.log"
echo "RESOURCES_DIR: $RESOURCES_DIR" >> "$RESOURCES_DIR/launch.log" 
echo "PYTHONPATH: $PYTHONPATH" >> "$RESOURCES_DIR/launch.log"
echo "Python executable: $(which python3)" >> "$RESOURCES_DIR/launch.log"
echo "Python version: $(python3 --version)" >> "$RESOURCES_DIR/launch.log"
echo "Available modules:" >> "$RESOURCES_DIR/launch.log"
python3 -c "help('modules')" >> "$RESOURCES_DIR/launch.log" 2>&1

# Launch the app with Python
cd "$RESOURCES_DIR"  # Change to resources directory before launching
exec python3 "$RESOURCES_DIR/main.py"
EOL
          
          # Make the launcher executable
          chmod +x "${APP_DIR}/Contents/MacOS/${APP_NAME}"
          
          # Copy resources
          cp -f icons/status/audio.svg "${APP_DIR}/Contents/Resources/icons/"
          cp -f icons/status/video.svg "${APP_DIR}/Contents/Resources/icons/"
          cp -f icons/status/file.svg "${APP_DIR}/Contents/Resources/icons/"
          cp -r icons "${APP_DIR}/Contents/Resources/"
          cp -f icons/status/* "${APP_DIR}/Contents/Resources/icons/status/"
          cp -r app "${APP_DIR}/Contents/Resources/"
          cp config.json "${APP_DIR}/Contents/Resources/" || true
          cp preset_prompts.json "${APP_DIR}/Contents/Resources/" || true
          cp main.py "${APP_DIR}/Contents/Resources/"
          
          # Create virtual environment
          python -m venv "${APP_DIR}/Contents/Resources/python"
          
          # Install dependencies
          "${APP_DIR}/Contents/Resources/python/bin/pip" install --upgrade pip
          "${APP_DIR}/Contents/Resources/python/bin/pip" install PyQt6 PyQt6-Qt6 appdirs colorlog
          "${APP_DIR}/Contents/Resources/python/bin/pip" install -r requirements.txt
          
          # Download CA certificates
          curl -o "${APP_DIR}/Contents/Resources/cacert.pem" https://curl.se/ca/cacert.pem
          
          # Copy ffmpeg binaries
          FFMPEG_PATH=$(which ffmpeg)
          FFPROBE_PATH=$(which ffprobe)
          cp "$FFMPEG_PATH" "${APP_DIR}/Contents/MacOS/bin/"
          cp "$FFPROBE_PATH" "${APP_DIR}/Contents/MacOS/bin/"
          chmod +x "${APP_DIR}/Contents/MacOS/bin/ffmpeg"
          chmod +x "${APP_DIR}/Contents/MacOS/bin/ffprobe"
      
      - name: Create disk image
        run: |
          hdiutil create -volname "Transcribrr" -srcfolder dist/Transcribrr.app -ov -format UDZO Transcribrr.dmg
      
      - name: Upload macOS App
        uses: actions/upload-artifact@v4
        with:
          name: Transcribrr-macOS
          path: dist/Transcribrr.app
          if-no-files-found: error
      
      - name: Upload DMG
        uses: actions/upload-artifact@v4
        with:
          name: Transcribrr-macOS-DMG
          path: Transcribrr.dmg
          if-no-files-found: error
          
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            Transcribrr.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
