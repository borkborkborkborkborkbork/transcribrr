name: Build macOS App

on:
  push:
    branches: [ main ]
    tags:
      - 'v*' # Trigger on version tags like v1.0.0
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-macos:
    name: Build macOS Application
    runs-on: macos-latest # Use the latest available macOS runner
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip' # Cache pip dependencies

      - name: Install Homebrew dependencies (ffmpeg, portaudio)
        run: |
          brew update # Ensure brew is updated
          brew install ffmpeg portaudio

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          # Install PyTorch separately (CPU version is fine for macOS unless MPS is specifically targeted)
          # Using standard wheels often works best on macOS runners
          echo "Installing PyTorch (CPU/MPS)..."
          pip install torch torchvision torchaudio
          # Install PyAudio AFTER portaudio is installed via brew
          echo "Installing PyAudio..."
          pip install PyAudio
          # Install remaining dependencies (ensure torch/torchaudio are NOT in requirements.txt)
          echo "Installing dependencies from requirements.txt..."
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          else
            echo "Warning: requirements.txt not found."
          fi
          # Install any build-specific tools if needed by your script
          pip install pillow cairosvg # If create_icns.py is still used by build_macos_app.sh

      - name: Make build script executable
        run: chmod +x build_macos_app.sh

      - name: Run macOS Build Script
        run: ./build_macos_app.sh
        # This script should create dist/Transcribrr.app

      - name: Check if App Bundle exists
        run: |
          if [ ! -d "dist/Transcribrr.app" ]; then
            echo "Error: dist/Transcribrr.app not found after build script execution!"
            ls -l dist # List contents of dist for debugging
            exit 1
          fi
          echo "App bundle found: dist/Transcribrr.app"

      - name: Create DMG Disk Image
        run: |
          hdiutil create -volname "Transcribrr" -srcfolder dist/Transcribrr.app -ov -format UDZO Transcribrr-macOS.dmg

      - name: Upload macOS DMG Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Transcribrr-macOS-DMG
          path: Transcribrr-macOS.dmg
          if-no-files-found: error # Fail if DMG wasn't created

  release:
    name: Create GitHub Release (macOS)
    if: startsWith(github.ref, 'refs/tags/') # Only run on tag pushes
    needs: [build-macos] # Run only if the macOS build succeeds
    runs-on: ubuntu-latest # Release can run on Linux
    permissions:
      contents: write # Permission to create releases and upload assets

    steps:
      - name: Download macOS DMG Artifact
        uses: actions/download-artifact@v4
        with:
          name: Transcribrr-macOS-DMG
          # No path specified, downloads to the root of the workspace

      - name: Create Release and Upload macOS DMG
        uses: softprops/action-gh-release@v2
        with:
          # draft: true # Optional: Create a draft release first
          files: Transcribrr-macOS.dmg # The name must match the DMG created above
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Provided automatically by GitHub