You are absolutely right! It seems my previous assumption that portaudio was available directly via Chocolatey was incorrect. The error message confirms:

portaudio not installed. The package was not found with the source(s) listed.
Source(s): 'https://community.chocolatey.org/api/v2/'


This means there isn't a package named exactly portaudio in the standard Chocolatey community repository.

Revised Solution: Install PyAudio Directly

Often, the official PyAudio wheels available on PyPI for Windows already include the necessary PortAudio components, or the build environment on the GitHub Actions runner might be sufficient for pip to build it successfully without a separate PortAudio installation step.

Let's simplify the workflow by removing the choco install portaudio step and letting pip handle the PyAudio installation directly.

Updated GitHub Actions Steps:

Modify both the build-cpu and build-cuda jobs like this:

# ... (previous steps like setup-python, choco, ffmpeg) ...

      # --- REMOVE this step ---
      # - name: Install PortAudio (PyAudio dependency)
      #  run: choco install portaudio -y --no-progress --force
      # -----------------------

      # --- Install PyAudio directly using pip ---
      - name: Install PyAudio via pip
        run: python -m pip install pyaudio --timeout=300 # Add timeout for potentially slow builds/downloads
      # ------------------------------------------

      - name: Run Windows Build Script (CPU or CUDA)
        # ... rest of the job ...
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Yaml
IGNORE_WHEN_COPYING_END

Full Corrected Workflow File:

Here's the complete YAML file with this change implemented in both jobs:

name: Build Windows App (CPU & CUDA)

on:
  push:
    branches: [ main ]
    tags:
      - 'v*' # Trigger on version tags like v1.0.0
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-cpu:
    name: Build Windows (CPU)
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip' # Cache pip dependencies

      - name: Install Chocolatey (if needed)
        run: |
          $chocoPath = Get-Command choco -ErrorAction SilentlyContinue
          if (-not $chocoPath) {
            Write-Host "Installing Chocolatey..."
            Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          } else {
            Write-Host "Chocolatey already installed at $($chocoPath.Source)"
          }
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
        shell: powershell

      - name: Install FFmpeg via Chocolatey
        run: choco install ffmpeg -y --no-progress --force

      # --- Install PyAudio directly using pip ---
      - name: Install PyAudio via pip
        run: python -m pip install pyaudio --timeout=300
      # ------------------------------------------

      - name: Run Windows Build Script (CPU)
        run: .\build_windows_app.bat # Run without --cuda flag

      - name: Archive CPU Build Artifact
        run: |
          Compress-Archive -Path dist\Transcribrr\* -DestinationPath Transcribrr-Windows-CPU.zip -Force
        shell: powershell

      - name: Upload CPU Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Transcribrr-Windows-CPU
          path: Transcribrr-Windows-CPU.zip
          if-no-files-found: error

  build-cuda:
    name: Build Windows (CUDA)
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install Chocolatey (if needed)
        run: |
          $chocoPath = Get-Command choco -ErrorAction SilentlyContinue
          if (-not $chocoPath) {
            Write-Host "Installing Chocolatey..."
            Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          } else {
            Write-Host "Chocolatey already installed at $($chocoPath.Source)"
          }
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
        shell: powershell

      - name: Install FFmpeg via Chocolatey
        run: choco install ffmpeg -y --no-progress --force

      # --- Install PyAudio directly using pip ---
      - name: Install PyAudio via pip
        run: python -m pip install pyaudio --timeout=300
      # ------------------------------------------

      - name: Run Windows Build Script (CUDA)
        run: .\build_windows_app.bat --cuda # Run WITH --cuda flag

      - name: Archive CUDA Build Artifact
        run: |
          Compress-Archive -Path dist\Transcribrr\* -DestinationPath Transcribrr-Windows-CUDA.zip -Force
        shell: powershell

      - name: Upload CUDA Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Transcribrr-Windows-CUDA
          path: Transcribrr-Windows-CUDA.zip
          if-no-files-found: error

  release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build-cpu, build-cuda]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download CPU Artifact
        uses: actions/download-artifact@v4
        with:
          name: Transcribrr-Windows-CPU
          path: artifacts/cpu

      - name: Download CUDA Artifact
        uses: actions/download-artifact@v4
        with:
          name: Transcribrr-Windows-CUDA
          path: artifacts/cuda

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/cpu/Transcribrr-Windows-CPU.zip
            artifacts/cuda/Transcribrr-Windows-CUDA.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Yaml
IGNORE_WHEN_COPYING_END

This is the standard and generally preferred method now. Give this version a try. If pip install pyaudio still fails, it might indicate a more complex build dependency issue on the runner, and we might need to explore installing build tools like the Microsoft Visual C++ Build Tools, but let's try the simpler direct pip install first.