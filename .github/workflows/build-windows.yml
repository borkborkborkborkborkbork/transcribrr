name: Build Windows App (CPU & CUDA)

on:
  push:
    branches: [ main ]
    tags:
      - 'v*' # Trigger on version tags like v1.0.0
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-cpu:
    name: Build Windows (CPU)
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip' # Cache pip dependencies

      - name: Install Chocolatey (if needed)
        run: |
          # Check if choco is available, install if not (usually pre-installed on GH runners)
          where choco
          if %ERRORLEVEL% NEQ 0 (
            echo "Installing Chocolatey..."
            powershell -NoProfile -ExecutionPolicy Bypass -Command "Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))"
          ) else (
            echo "Chocolatey already installed."
          )
          # Add choco to PATH for this step if just installed
          refreshenv

      - name: Install FFmpeg via Chocolatey
        run: choco install ffmpeg -y --no-progress --force

      - name: Install PyAudio Build Dependencies (pipwin)
        run: |
          python -m pip install --upgrade pip
          pip install pipwin

      - name: Install PyAudio via pipwin
        run: pipwin install pyaudio

      - name: Run Windows Build Script (CPU)
        run: .\build_windows_app.bat # Run without --cuda flag

      - name: Archive CPU Build Artifact
        run: |
          Compress-Archive -Path dist\Transcribrr\* -DestinationPath Transcribrr-Windows-CPU.zip -Force
        shell: powershell

      - name: Upload CPU Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Transcribrr-Windows-CPU
          path: Transcribrr-Windows-CPU.zip
          if-no-files-found: error

  build-cuda:
    name: Build Windows (CUDA)
    runs-on: windows-latest # Note: This runner does NOT have CUDA runtime/drivers installed.
                            # This job *builds* with CUDA wheels but cannot *test* CUDA execution here.
                            # Use a self-hosted runner with GPU/CUDA for full testing.
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'

- name: Install Chocolatey (if needed)
        run: |
          $chocoPath = Get-Command choco -ErrorAction SilentlyContinue
          if (-not $chocoPath) {
            Write-Host "Installing Chocolatey..."
            Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          } else {
            Write-Host "Chocolatey already installed at $($chocoPath.Source)"
          }
          # Refresh environment variables in PowerShell to ensure choco is available immediately
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
        shell: powershell # Explicitly specify PowerShell

      - name: Install FFmpeg via Chocolatey
        run: choco install ffmpeg -y --no-progress --force

      - name: Install PyAudio Build Dependencies (pipwin)
        run: |
          python -m pip install --upgrade pip
          pip install pipwin

      - name: Install PyAudio via pipwin
        run: pipwin install pyaudio

      - name: Run Windows Build Script (CUDA)
        run: .\build_windows_app.bat --cuda # Run WITH --cuda flag

      - name: Archive CUDA Build Artifact
        run: |
          Compress-Archive -Path dist\Transcribrr\* -DestinationPath Transcribrr-Windows-CUDA.zip -Force
        shell: powershell

      - name: Upload CUDA Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Transcribrr-Windows-CUDA
          path: Transcribrr-Windows-CUDA.zip
          if-no-files-found: error

  release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/') # Only run on tag pushes
    needs: [build-cpu, build-cuda] # Run only if both builds succeed
    runs-on: ubuntu-latest # Release can run on Linux
    permissions:
      contents: write # Permission to create releases and upload assets

    steps:
      - name: Download CPU Artifact
        uses: actions/download-artifact@v4
        with:
          name: Transcribrr-Windows-CPU
          path: artifacts/cpu # Download to a specific sub-directory

      - name: Download CUDA Artifact
        uses: actions/download-artifact@v4
        with:
          name: Transcribrr-Windows-CUDA
          path: artifacts/cuda # Download to a specific sub-directory

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2 # Use v2 for potentially better node support
        with:
          # draft: true # Optional: Create a draft release first
          files: |
            artifacts/cpu/Transcribrr-Windows-CPU.zip
            artifacts/cuda/Transcribrr-Windows-CUDA.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Provided automatically by GitHub