name: Build Windows App (CPU & CUDA)

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build Windows (${{ matrix.build_type }})
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - build_type: CPU
            cuda_flag: "" # Empty flag for CPU build
            artifact_suffix: CPU
          - build_type: CUDA
            cuda_flag: "--cuda" # --cuda flag for CUDA build
            artifact_suffix: CUDA
            # Note: Runner doesn't have CUDA drivers, only builds wheels.

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install Chocolatey (if needed)
        run: |
          $chocoPath = Get-Command choco -ErrorAction SilentlyContinue
          if (-not $chocoPath) {
            Write-Host "Installing Chocolatey..."
            Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          } else {
            Write-Host "Chocolatey already installed at $($chocoPath.Source)"
          }
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
        shell: powershell

      - name: Install FFmpeg via Chocolatey
        run: choco install ffmpeg -y --no-progress --force

      - name: Install PyAudio via pip
        run: python -m pip install pyaudio --timeout=300

      # Use the matrix flag to conditionally run the build script
      - name: Run Windows Build Script (${{ matrix.build_type }})
        run: .\build_windows_app.bat ${{ matrix.cuda_flag }}

      # --- Corrected Archiving Step ---
      - name: Archive Build Artifact (${{ matrix.build_type }})
        run: |
          Compress-Archive -Path dist\Transcribrr -DestinationPath Transcribrr-Windows-${{ matrix.artifact_suffix }}.zip -Force
        shell: powershell

      - name: Upload Build Artifact (${{ matrix.build_type }})
        uses: actions/upload-artifact@v4
        with:
          name: Transcribrr-Windows-${{ matrix.artifact_suffix }}
          path: Transcribrr-Windows-${{ matrix.artifact_suffix }}.zip
          if-no-files-found: error

  release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build] # Depends on the matrix build job
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # Download both artifacts (names now include suffix)
      - name: Download CPU Artifact
        uses: actions/download-artifact@v4
        with:
          name: Transcribrr-Windows-CPU
          path: artifacts/cpu

      - name: Download CUDA Artifact
        uses: actions/download-artifact@v4
        with:
          name: Transcribrr-Windows-CUDA
          path: artifacts/cuda

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/cpu/Transcribrr-Windows-CPU.zip
            artifacts/cuda/Transcribrr-Windows-CUDA.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}